Standard ML of New Jersey (64-bit) v110.99.3 [built: Thu Jul 28 00:35:16 2022]
[opening caesar.sml]
val negate = fn : int -> int
val createSequence = fn : int -> int list
val createListInt = fn : int * int -> int list
val createListString = fn : string * int -> string list
val handleWraparond = fn : int -> int
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val performShift = fn : char * int -> char
[autoloading]
[autoloading done]
val encrypt = fn : string * int -> string
val decrypt = fn : string * int -> string
val cleanSolveShift = fn : int -> int
val solve = fn : string * int -> string list
Alan tests:
val it = () : unit
val encryptOut = "BPQA QA I BMAB ABZQVO NZWU ITIV" : string
val decryptOut = "THIS IS A TEST STRING FROM ALAN" : string
val solveOut =
  ["Caesar: 26: HAL","Caesar: 25: GZK","Caesar: 24: FYJ","Caesar: 23: EXI",
   "Caesar: 22: DWH","Caesar: 21: CVG","Caesar: 20: BUF","Caesar: 19: ATE",
   "Caesar: 18: ZSD","Caesar: 17: YRC","Caesar: 16: XQB","Caesar: 15: WPA",
   "Caesar: 14: VOZ","Caesar: 13: UNY","Caesar: 12: TMX","Caesar: 11: SLW",
   ...] : string list
Caesar: 26: HAL
Caesar: 25: GZK
Caesar: 24: FYJ
Caesar: 23: EXI
Caesar: 22: DWH
Caesar: 21: CVG
Caesar: 20: BUF
Caesar: 19: ATE
Caesar: 18: ZSD
Caesar: 17: YRC
Caesar: 16: XQB
Caesar: 15: WPA
Caesar: 14: VOZ
Caesar: 13: UNY
Caesar: 12: TMX
Caesar: 11: SLW
Caesar: 10: RKV
Caesar: 9: QJU
Caesar: 8: PIT
Caesar: 7: OHS
Caesar: 6: NGR
Caesar: 5: MFQ
Caesar: 4: LEP
Caesar: 3: KDO
Caesar: 2: JCN
Caesar: 1: IBM
Caesar: 0: HAL
val it = () : unit
Encrypt and decrypt tests:
val it = () : unit
val encryptOut = "SGHR HR Z SDRS RSQHMF EQNL ZKZM" : string
val decryptOut = "THIS IS A TEST STRING FROM ALAN" : string
val encryptOut = "UIJT JT B UFTU TUSJOH GSPN BMBO" : string
val decryptOut = "THIS IS A TEST STRING FROM ALAN" : string
val encryptOut = "" : string
val decryptOut = "" : string
val encryptOut = "1234567890!@#$%^&*(){}" : string
val decryptOut = "1234567890!@#$%^&*(){}" : string
Solve tests:
val it = () : unit
val solveOut =
  ["Caesar: 26: HAL","Caesar: 25: GZK","Caesar: 24: FYJ","Caesar: 23: EXI",
   "Caesar: 22: DWH","Caesar: 21: CVG","Caesar: 20: BUF","Caesar: 19: ATE",
   "Caesar: 18: ZSD","Caesar: 17: YRC","Caesar: 16: XQB","Caesar: 15: WPA",
   "Caesar: 14: VOZ","Caesar: 13: UNY","Caesar: 12: TMX","Caesar: 11: SLW",
   ...] : string list
Caesar: 26: HAL
Caesar: 25: GZK
Caesar: 24: FYJ
Caesar: 23: EXI
Caesar: 22: DWH
Caesar: 21: CVG
Caesar: 20: BUF
Caesar: 19: ATE
Caesar: 18: ZSD
Caesar: 17: YRC
Caesar: 16: XQB
Caesar: 15: WPA
Caesar: 14: VOZ
Caesar: 13: UNY
Caesar: 12: TMX
Caesar: 11: SLW
Caesar: 10: RKV
Caesar: 9: QJU
Caesar: 8: PIT
Caesar: 7: OHS
Caesar: 6: NGR
Caesar: 5: MFQ
Caesar: 4: LEP
Caesar: 3: KDO
Caesar: 2: JCN
Caesar: 1: IBM
Caesar: 0: HAL
val it = () : unit
val solveOut =
  ["Caesar: 4: LEP","Caesar: 3: KDO","Caesar: 2: JCN","Caesar: 1: IBM",
   "Caesar: 0: HAL"] : string list
Caesar: 4: LEP
Caesar: 3: KDO
Caesar: 2: JCN
Caesar: 1: IBM
Caesar: 0: HAL
val it = () : unit
caesar.sml:112.1-112.36 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)
